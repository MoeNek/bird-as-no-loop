function no_as_loop_oneasn (int current_asn; bgppath temp_path; bool debug_print)
int temp_path_len;
int temp_path_remain;
int asn_count;
{
    if temp_path.len = 0 then {
        return true;
    }
    temp_path_len = temp_path.len;
    temp_path_remain = delete(temp_path, current_asn).len;
    asn_count = temp_path_len - temp_path_remain;
    if debug_print then {
        print "current_asn = ", current_asn;
        print "asn_count = ", asn_count;
        print "check " , current_asn , " is continue in path:", temp_path;
    }
    if asn_count = 1 return true;	#优化掉switch
    if asn_count > 16 return false;	# Too Many ASN
    return temp_path ~ [= * current_asn+ =];	
}

function no_as_loop (bool debug_print; bggpath temp_path)	# 调用时直接在temp_path位置填入bgp_path，并尝试递归处理（我没试过BIRD能不能递归，悠着点）
bgppath temp_path;
int current_asn;
{
    if debug_print then print "prefix: ", net;
    if temp_path.len = 0 then {if debug_print then print "########## no more asn, pass"; return true;}
    current_asn = temp_path.last;
    if no_ass_loop_oneasn(current_asn, temp_path, debug_print) = false then {if debug_print then print "########## check result: false"; return false;} else { if debug_print then print "#### check result: true";}
    temp_path = delete(temp_path, current_asn);
    # =========================
    if temp_path.len < 20 then return no_as_loop(debug_print, temp_path);
    if debug_print then print "########## too many asn";
    return false;
}
